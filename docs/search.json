[
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "DSAN-Viz Mini Project 2025",
    "section": "",
    "text": "https://www.youtube.com/watch?v=_VGJIPRGTy4&ab_channel=PositPBC\ncolor palette: https://colormagic.app/palette/671c38d353d1e2a13ca7ee06\nimages: https://www.thenewhumanitarian.org/feature/2021/2/25/then-and-now-25-years-of-aid-worker-insecurity\nmap tile overlay “https://www.jawg.io/lab/”\nhttps://menghanibhanvi.medium.com/folium-all-you-need-for-map-visualization-206e88c8ac\nhttps://www.youtube.com/watch?v=gCLCn4TVlWo&ab_channel=PositPBC\ni am not a target photo: https://www.thenewhumanitarian.org/feature/2021/2/25/then-and-now-25-years-of-aid-worker-insecurity\nunhcr blue shirt: https://www.unhcr.org/news/stories/un-refugee-chief-honours-commitment-and-spirit-aid-workers\nworld vision: https://www.wvi.org/opinion/view/five-things-you-may-not-know-about-humanitarians\nsudan: https://www.ibtimes.co.uk/south-sudan-parliament-passes-bill-limiting-foreign-aid-workers-amid-humanitarian-crisis-1542128\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Humanitarian Shield:",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "Source: The data for this analysis was sourced from the Aid Worker Security Database (Humanitarian Outcomes 2025). 3,950 ROWS unit of analysis = ## Load and Preview Data\n\n\nCode\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"font.family\"] = \"Tahoma\"\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\nCode\n# Load data\ndf = pd.read_csv(\"data/raw_data/security_incidents.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nIncident ID\nYear\nMonth\nDay\nCountry Code\nCountry\nRegion\nDistrict\nCity\nUN\n...\nAttack context\nLocation\nLatitude\nLongitude\nMotive\nActor type\nActor name\nDetails\nVerified\nSource\n\n\n\n\n0\n1\n1997\n1.0\nNaN\nKH\nCambodia\nBanteay Meanchey\nNaN\nNaN\n0\n...\nUnknown\nUnknown\n14.070929\n103.099916\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\n\n\n1\n2\n1997\n1.0\nNaN\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n...\nRaid\nOffice/compound\n-1.499840\n29.634970\nUnknown\nUnknown\nUnknown\n3 INGO international (Spanish) staff killed, 1...\nArchived\nArchived\n\n\n2\n3\n1997\n2.0\nNaN\nTJ\nTajikistan\nNaN\nNaN\nNaN\n4\n...\nUnknown\nUnknown\n38.628173\n70.815654\nNaN\nUnknown\nUnknown\n3 UN national staff, 1 UN international (Niger...\nArchived\nArchived\n\n\n3\n4\n1997\n2.0\nNaN\nSO\nSomalia\nLower Juba\nKismayo\nKismayo\n0\n...\nUnknown\nUnknown\n-0.358216\n42.545087\nPolitical\nNon-state armed group: Regional\nAl-Itihaad al-Islamiya\n1 INGO international staff killed by Al ittiha...\nArchived\nArchived\n\n\n4\n5\n1997\n2.0\n14.0\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n...\nIndividual attack\nUnknown\n-1.950851\n30.061508\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali ...\nArchived\nArchived\n\n\n\n\n5 rows × 41 columns",
    "crumbs": [
      "Home",
      "Technical Details",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "data_cleaning.html#data-source-description",
    "href": "data_cleaning.html#data-source-description",
    "title": "Data Cleaning",
    "section": "",
    "text": "Source: The data for this analysis was sourced from the Aid Worker Security Database (Humanitarian Outcomes 2025). 3,950 ROWS unit of analysis = ## Load and Preview Data\n\n\nCode\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"font.family\"] = \"Tahoma\"\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\nCode\n# Load data\ndf = pd.read_csv(\"data/raw_data/security_incidents.csv\")\ndf.head()\n\n\n\n\n\n\n\n\n\nIncident ID\nYear\nMonth\nDay\nCountry Code\nCountry\nRegion\nDistrict\nCity\nUN\n...\nAttack context\nLocation\nLatitude\nLongitude\nMotive\nActor type\nActor name\nDetails\nVerified\nSource\n\n\n\n\n0\n1\n1997\n1.0\nNaN\nKH\nCambodia\nBanteay Meanchey\nNaN\nNaN\n0\n...\nUnknown\nUnknown\n14.070929\n103.099916\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\n\n\n1\n2\n1997\n1.0\nNaN\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n...\nRaid\nOffice/compound\n-1.499840\n29.634970\nUnknown\nUnknown\nUnknown\n3 INGO international (Spanish) staff killed, 1...\nArchived\nArchived\n\n\n2\n3\n1997\n2.0\nNaN\nTJ\nTajikistan\nNaN\nNaN\nNaN\n4\n...\nUnknown\nUnknown\n38.628173\n70.815654\nNaN\nUnknown\nUnknown\n3 UN national staff, 1 UN international (Niger...\nArchived\nArchived\n\n\n3\n4\n1997\n2.0\nNaN\nSO\nSomalia\nLower Juba\nKismayo\nKismayo\n0\n...\nUnknown\nUnknown\n-0.358216\n42.545087\nPolitical\nNon-state armed group: Regional\nAl-Itihaad al-Islamiya\n1 INGO international staff killed by Al ittiha...\nArchived\nArchived\n\n\n4\n5\n1997\n2.0\n14.0\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n...\nIndividual attack\nUnknown\n-1.950851\n30.061508\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali ...\nArchived\nArchived\n\n\n\n\n5 rows × 41 columns",
    "crumbs": [
      "Home",
      "Technical Details",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "data_cleaning.html#standardization",
    "href": "data_cleaning.html#standardization",
    "title": "Data Cleaning",
    "section": "Standardization",
    "text": "Standardization\nTo prepare the dataset for analysis, column headers and country names were standardized by formatting text consistently and manually correcting common acronyms or naming variations.\n\n\nCode\n# Headers to exclude from header standardization\nexclude = [\"UN\", \"INGO\", \"ICRC\", \"NRCS and IFRC\", \"NNGO\"]\n\n# Modify headers: lowercase and replace spaces with underscores, except for the excluded ones\ndf.columns = [\n    header.lower().replace(\" \", \"_\") if header not in exclude else header\n    for header in df.columns\n]\n\n# Title case + remove leading/trailing whitespace\ndf[\"country\"] = df[\"country\"].str.title().str.strip()\ndf[\"region\"] = df[\"region\"].str.title().str.strip()\n\n# Manual overrides for known acronyms or special cases (This was done retroactively)\nfix_countries = {\n    \"Dr Congo\": \"DR Congo\",\n    \"Cote D'Ivoire\": \"Côte d'Ivoire\",\n    \"Central African Rep.\": \"Central African Republic\",\n    \"Central African Rep\": \"Central African Republic\",\n    \"Iran, Islamic Republic Of\": \"Iran\",\n    \"Libyan Arab Jamahiriya\": \"Libya\",\n    \"Dominican Rep.\": \"Dominican Republic\",\n    \"Dominican Rep\": \"Dominican Republic\",\n}\n\ndf[\"country\"] = df[\"country\"].replace(fix_countries)\ndf.head(1)\n\n\n\n\n\n\n\n\n\nincident_id\nyear\nmonth\nday\ncountry_code\ncountry\nregion\ndistrict\ncity\nUN\n...\nattack_context\nlocation\nlatitude\nlongitude\nmotive\nactor_type\nactor_name\ndetails\nverified\nsource\n\n\n\n\n0\n1\n1997\n1.0\nNaN\nKH\nCambodia\nBanteay Meanchey\nNaN\nNaN\n0\n...\nUnknown\nUnknown\n14.070929\n103.099916\nUnknown\nUnknown\nUnknown\n1 ICRC national staff killed while working in ...\nArchived\nArchived\n\n\n\n\n1 rows × 41 columns",
    "crumbs": [
      "Home",
      "Technical Details",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "data_cleaning.html#check-for-duplicates",
    "href": "data_cleaning.html#check-for-duplicates",
    "title": "Data Cleaning",
    "section": "Check for Duplicates",
    "text": "Check for Duplicates\n\n\nCode\nif not df[\"incident_id\"].is_unique:\n    print(\"Duplicate IDs found\")\n\n\nThere are no duplicates in the dataset!",
    "crumbs": [
      "Home",
      "Technical Details",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "data_cleaning.html#handling-missing-values",
    "href": "data_cleaning.html#handling-missing-values",
    "title": "Data Cleaning",
    "section": "Handling Missing Values",
    "text": "Handling Missing Values\n\nIdentifying Missing Data\nMissing values are identified to ensure critical data gaps are addressed before proceeding with analysis.\n\n\nCode\nprint(\n    \"Number of rows:\", df.shape[0], \"\\n\\nMissing Data: \"\n)  #  # Understanding the total count helps in assessing the impact of missing values and evaluating the significance of data removal decisions.\nna_counts = df.isna().sum()\nprint(na_counts)\n\n\nNumber of rows: 4337 \n\nMissing Data: \nincident_id                   0\nyear                          0\nmonth                        48\nday                         380\ncountry_code                 33\ncountry                       5\nregion                      367\ndistrict                    736\ncity                        988\nUN                            0\nINGO                          0\nICRC                          9\nNRCS and IFRC                 9\nNNGO                          9\nother                         0\nnationals_killed              0\nnationals_wounded             0\nnationals_kidnapped           0\ntotal_nationals               0\ninternationals_killed         0\ninternationals_wounded        0\ninternationals_kidnapped      0\ntotal_internationals          0\ntotal_killed                  0\ntotal_wounded                 0\ntotal_kidnapped               0\ntotal_affected                0\ngender_male                   0\ngender_female                 0\ngender_unknown                0\nmeans_of_attack               0\nattack_context                0\nlocation                      0\nlatitude                     13\nlongitude                    13\nmotive                        4\nactor_type                    0\nactor_name                    8\ndetails                       0\nverified                      1\nsource                        0\ndtype: int64\n\n\n\n\nVisualizing Missing Data\n\n\nCode\nimport missingno as msno\n\nmsno.matrix(df)\n\n\n\n\n\n\n\n\n\n\n\nExploring Missing Data Patterns\nExploring patterns in missing data is important for identifying dependencies between variables and making better cleaning decisions. The matrix heatmap above shows where values are missing across the dataset. The correlation heatmap below goes further, showing which fields tend to be missing together. This helps avoid careless deletions or assumptions when handling missing data, and supports a more informed cleanup process.\n\n\nCode\nmsno.heatmap(df)\n\n\n\n\n\n\n\n\n\nThe missing data in this dataset appears to be Missing at Random (MAR), which means the likelihood of a value being missing is related to other observed variables in the dataset, rather than the missing value itself. Evidence for this includes the observed dependencies between fields with missing data.\n\ncity and district demonstrate a strong correlation in missing data, suggesting that when one is missing, the other is likely to be missing as well.\nThere are moderate correlations between city and region, as well as district and region, which indicates that missing data in these fields often occur together, reflecting challenges in documenting comprehensive geographic details in some records.\nBoth latitude and longitude show a strong correlation with each other and moderate correlation with country_code and country, which could imply that missing geographic coordinates are related to missing or incorrect country coding.\nThe missing day data, while not strongly correlated with any single geographic field, is often concurrently missing when region, district, and city data are absent, a pattern that underscores the challenges in recording accurate and complete information in chaotic environments.\n\n\n\nDropping Data\nData Dropping Decisions 1. Dropping rows where both latitude and longitude are missing ensures that all entries have necessary data for location-specific analysis. Interestingly, this step also removed all entries missing the country field, which aligns with ensuring geographic accuracy. Given that only 13 records were affected, this represents a minor portion (approximately 0.29%) of the dataset, minimizing the impact on the overall data integrity and availability for analysis.\n\nDropping rows where both day and month are missing because complete date information is important for temporal patterns and analysis. As in conflict zones, immediate crisis response can prioritize medical aid over detailed record-keeping, ensuring the availability of at least partial date information helps in maintaining a minimal level of temporal analysis capability.\nConsidering the chaotic environments in which this data is collected, the simultaneous absence of multiple key pieces of information, day, region, district, city in the same record could indicate recording challenges and also potentially lower reliability or raise uncertainty in these specific entries. Further, given the correlation among these fields and their collective importance for any geographic or temporal analysis, dropping these rows was necessary to enhance the reliability of the dataset.\n\n\n\nCode\n# Drop rows where latitude, longitude are missing\ndf.dropna(subset=[\"latitude\", \"longitude\"], how=\"all\", inplace=True)\n\n# Drop rows where day and month are missing\ndf.dropna(subset=[\"day\", \"month\"], inplace=True)\n\n# Drop rows where day, region, district, and city are all missing\ndf.dropna(subset=[\"day\", \"region\", \"district\", \"city\"], how=\"all\", inplace=True)\n\n# Print the number of rows after dropping\nprint(\"Number of rows after dropping specified missing data:\", df.shape[0], \"\\n\")\n\n\nNumber of rows after dropping specified missing data: 3949 \n\n\n\n\n\nFilling in Missing Data\n\nGeographic Data using Nominatim\nReverse geocoding through GeoPy’s Nominatim API will be used to populate missing geographic data in which there are missing values in the city, district, and region fields but latitude and longitude coordinates are available.\nFirst, a boolean mask is created to identify rows where at least one of the location fields is null while valid latitude and longitude values are present which allows the reverse geocoding process to run only on rows that have coordinates available for lookup.\n\n\nCode\nmask = (\n    df[[\"city\", \"district\", \"region\"]].isna().any(axis=1)\n    & df[\"latitude\"].notna()\n    & df[\"longitude\"].notna()\n)\n\nprint(\"Rows with missing city/district/region but with valid lat/long:\", mask.sum())\n\n\nRows with missing city/district/region but with valid lat/long: 762\n\n\n\n\nCode\nfrom geopy.geocoders import Nominatim\nfrom time import sleep\n\ngeolocator = Nominatim(user_agent=\"geo_cleaner_25\")\n\n\ndef reverse_geocode(lat, lon):\n    try:\n        location = geolocator.reverse(\n            (lat, lon), timeout=10, language=\"en\"\n        )  # force English\n        if location and location.raw.get(\"address\"):\n            address = location.raw[\"address\"]\n            return {\n                \"city\": address.get(\"city\")\n                or address.get(\"town\")\n                or address.get(\"village\"),\n                \"district\": address.get(\"county\"),\n                \"region\": address.get(\"state\"),\n            }\n    except:\n        return None\n\n\n# Apply to missing rows (throttle with sleep to avoid being blocked)\nfilled = []\nfor idx, row in df[mask].iterrows():\n    result = reverse_geocode(row[\"latitude\"], row[\"longitude\"])\n    if result:\n        for key in [\"city\", \"district\", \"region\"]:\n            if pd.isna(df.at[idx, key]) and result.get(key):\n                df.at[idx, key] = result[key]\n    sleep(1)  # Nominatim rate limit\n\n\n\n\nCode\nprint(\"Remaining missing values:\")\nprint(df[[\"city\", \"district\", \"region\"]].isna().sum())\n\nupdated_mask = mask & df[[\"city\", \"district\", \"region\"]].notna().any(axis=1)\n\nprint(\"Rows successfully updated with at least one field:\", updated_mask.sum())\n\n\nRemaining missing values:\ncity        264\ndistrict    178\nregion       15\ndtype: int64\nRows successfully updated with at least one field: 761\n\n\n\n\nCode\n# Fill remaining geographic missing data with Unknown\ndf[\"district\"].fillna(\"Unknown\", inplace=True)\ndf[\"city\"].fillna(\"Unknown\", inplace=True)\ndf[\"region\"].fillna(\"Unknown\", inplace=True)\n\n\n\nStandardizing Newly Added Geographic Data\nTo standardize newly added geographic names, accented characters were replaced with their unaccented equivalents using a custom mapping function. This step helps avoid inconsistencies caused by special characters in the dataset. Quotation marks and commas were also removed from location fields to prevent parsing issues and ensure consistent text formatting.\n\n\nCode\nimport re\n\n# Dictionary to replace accented characters with plain equivalents\nreplacements = {\n    \"é\": \"e\",\n    \"è\": \"e\",\n    \"ê\": \"e\",\n    \"á\": \"a\",\n    \"í\": \"i\",\n    \"ó\": \"o\",\n    \"ú\": \"u\",\n    \"ñ\": \"n\",\n}\n\n\n# Replace accented characters\ndef replace_accents(text):\n    if isinstance(text, str):\n        for accented_char, replacement in replacements.items():\n            text = text.replace(accented_char, replacement)\n        return text\n    return text\n\n\ndf = df.applymap(replace_accents)\n\n# Characters to remove from location fields\nunwanted_chars = ['\"', \",\"]\n\n\n# Clean unwanted characters and remove anything in parentheses\ndef clean_location_text(text):\n    if isinstance(text, str):\n        for char in unwanted_chars:\n            text = text.replace(char, \"\")\n        # Remove \"(near)\" and anything similar in parentheses\n        text = re.sub(r\"\\s*\\(.*?\\)\", \"\", text)\n    return text\n\n\n# Apply cleaning to city, district, and region columns\nfor col in [\"city\", \"district\", \"region\"]:\n    df[col] = df[col].apply(clean_location_text)\n\n\n\n\n\nCountry Codes\n\n\nCode\nmissing_country_code = df[df[[\"country_code\"]].isna().all(axis=1)]\nprint(\"Unique countries where 'country_code' is missing:\")\nprint(missing_country_code[\"country\"].unique())\n\n\nUnique countries where 'country_code' is missing:\n['Chechnya' 'Namibia']\n\n\nSource: ISO Country Codes\n\n\nCode\ncountry_code_mapping = {\"Namibia\": \"NA\", \"Chechnya\": \"RU-CE\"}\n\ndf.loc[df[\"country\"].isin([\"Namibia\", \"Chechnya\"]), \"country_code\"] = df[\"country\"].map(\n    country_code_mapping\n)\n\n\n\n\nRemaining Missing Data\n\n\nCode\ndf[\"motive\"].fillna(\"Unknown\", inplace=True)\ndf[\"actor_name\"].fillna(\"Unknown\", inplace=True)\ndf[\"verified\"].fillna(\n    \"No\", inplace=True\n)  # If not \"yes\", \"archived\", or \"pending\" which are the available values then the assumption is no, there is only one NA for \"Verified\" so this feels safe.\n\n# Check remaining missing data summary\nprint(df.isna().sum())\n\n\nincident_id                 0\nyear                        0\nmonth                       0\nday                         0\ncountry_code                0\ncountry                     0\nregion                      0\ndistrict                    0\ncity                        0\nUN                          0\nINGO                        0\nICRC                        9\nNRCS and IFRC               9\nNNGO                        9\nother                       0\nnationals_killed            0\nnationals_wounded           0\nnationals_kidnapped         0\ntotal_nationals             0\ninternationals_killed       0\ninternationals_wounded      0\ninternationals_kidnapped    0\ntotal_internationals        0\ntotal_killed                0\ntotal_wounded               0\ntotal_kidnapped             0\ntotal_affected              0\ngender_male                 0\ngender_female               0\ngender_unknown              0\nmeans_of_attack             0\nattack_context              0\nlocation                    0\nlatitude                    0\nlongitude                   0\nmotive                      0\nactor_type                  0\nactor_name                  0\ndetails                     0\nverified                    0\nsource                      0\ndtype: int64\n\n\nNow there are only three remaining variables with missing data: ICRC, NRCS and IFRC, and NNGO. Examination of these fields revealed that all three fields are simultaneously missing in 9 instances.\nTo maintain dataset integrity without dropping potentially valuable data, a placeholder will be introduced with a value of 100 for these missing entries. This method allows for the retention of these records in the analysis while clearly marking them for easy exclusion during analytical phases where accurate incident counts are necessary.\nHere are the unique values currently in these fields:\n\n\nCode\nprint(\"Unique values in 'ICRC':\", df[\"ICRC\"].unique())\nprint(\"Unique values in 'NRCS and IFRC':\", df[\"NRCS and IFRC\"].unique())\nprint(\"Unique values in 'NNGO':\", df[\"NNGO\"].unique())\n\n\nUnique values in 'ICRC': [ 0.  1.  7.  6.  2.  4. nan  3.  8.  5.]\nUnique values in 'NRCS and IFRC': [ 0.  3.  4.  1.  2.  6. 14. nan 15.  7. 11.  5. 10. 18. 19.  9.]\nUnique values in 'NNGO': [ 0.  3.  1.  4.  5.  2.  8. nan 12.  6.  7. 10. 11. 14.  9. 15.]\n\n\n\n\nCode\n# Fill missing values with 100 for specific columns\ndf[\"ICRC\"] = df[\"ICRC\"].fillna(100)\ndf[\"NRCS and IFRC\"] = df[\"NRCS and IFRC\"].fillna(100)\ndf[\"NNGO\"] = df[\"NNGO\"].fillna(100)\n\n\n\n\nCode\n# Check remaining missing data summary\nprint(df.isna().sum())\n# Print the number of rows after dropping\nprint(\"Number of rows:\", df.shape[0], \"\\n\")\n\n\nincident_id                 0\nyear                        0\nmonth                       0\nday                         0\ncountry_code                0\ncountry                     0\nregion                      0\ndistrict                    0\ncity                        0\nUN                          0\nINGO                        0\nICRC                        0\nNRCS and IFRC               0\nNNGO                        0\nother                       0\nnationals_killed            0\nnationals_wounded           0\nnationals_kidnapped         0\ntotal_nationals             0\ninternationals_killed       0\ninternationals_wounded      0\ninternationals_kidnapped    0\ntotal_internationals        0\ntotal_killed                0\ntotal_wounded               0\ntotal_kidnapped             0\ntotal_affected              0\ngender_male                 0\ngender_female               0\ngender_unknown              0\nmeans_of_attack             0\nattack_context              0\nlocation                    0\nlatitude                    0\nlongitude                   0\nmotive                      0\nactor_type                  0\nactor_name                  0\ndetails                     0\nverified                    0\nsource                      0\ndtype: int64\nNumber of rows: 3949 \n\n\n\nNow all of the missing data has been handled while maintaining the integrity of the data!",
    "crumbs": [
      "Home",
      "Technical Details",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "data_cleaning.html#data-type-optimization",
    "href": "data_cleaning.html#data-type-optimization",
    "title": "Data Cleaning",
    "section": "Data Type Optimization",
    "text": "Data Type Optimization\n\n\nCode\nprint(df.dtypes)\n\n\nincident_id                   int64\nyear                          int64\nmonth                       float64\nday                         float64\ncountry_code                 object\ncountry                      object\nregion                       object\ndistrict                     object\ncity                         object\nUN                            int64\nINGO                          int64\nICRC                        float64\nNRCS and IFRC               float64\nNNGO                        float64\nother                         int64\nnationals_killed              int64\nnationals_wounded             int64\nnationals_kidnapped           int64\ntotal_nationals               int64\ninternationals_killed         int64\ninternationals_wounded        int64\ninternationals_kidnapped      int64\ntotal_internationals          int64\ntotal_killed                  int64\ntotal_wounded                 int64\ntotal_kidnapped               int64\ntotal_affected                int64\ngender_male                   int64\ngender_female                 int64\ngender_unknown                int64\nmeans_of_attack              object\nattack_context               object\nlocation                     object\nlatitude                    float64\nlongitude                   float64\nmotive                       object\nactor_type                   object\nactor_name                   object\ndetails                      object\nverified                     object\nsource                       object\ndtype: object\n\n\n\n\nCode\n# Convert fields that represent counts to int\ndf[\"ICRC\"] = df[\"ICRC\"].astype(int)\ndf[\"NRCS and IFRC\"] = df[\"NRCS and IFRC\"].astype(int)\ndf[\"NNGO\"] = df[\"NNGO\"].astype(int)\n\n\n\nDate Conversion and Creating DateTime\nTo streamline analysis, separate year, month, and day columns were combined into a single date column using pd.to_datetime(). These columns were then dropped to keep the dataset tidy.\n\n\nCode\n# Convert to integers\ndf[\"year\"] = df[\"year\"].astype(int)\ndf[\"month\"] = df[\"month\"].astype(int)\ndf[\"day\"] = df[\"day\"].astype(int)\n\n# New date column from year, month, and day\ndf[\"date\"] = pd.to_datetime(df[[\"year\", \"month\", \"day\"]])\n\ndf.drop([\"year\", \"month\", \"day\"], axis=1, inplace=True)\n\n\n\n\nCode\n# Move date column after incident_id and before country_code\ncols = df.columns.tolist()\n\n# Remove date from current position\ncols.remove(\"date\")\n\n# Find index of incident_id\nidx = cols.index(\"incident_id\") + 1\ncols.insert(idx, \"date\")\n\n# Reorder the dataframe\ndf = df[cols]\ndf.head()\n\n\n\n\n\n\n\n\n\nincident_id\ndate\ncountry_code\ncountry\nregion\ndistrict\ncity\nUN\nINGO\nICRC\n...\nattack_context\nlocation\nlatitude\nlongitude\nmotive\nactor_type\nactor_name\ndetails\nverified\nsource\n\n\n\n\n4\n5\n1997-02-14\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n0\n0\n...\nIndividual attack\nUnknown\n-1.950851\n30.061508\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali ...\nArchived\nArchived\n\n\n6\n6\n1997-05-07\nSL\nSierra Leone\nTonkolili District\nUnknown\nMayamba\n3\n0\n0\n...\nAmbush\nRoad\n8.640035\n-11.840027\nUnknown\nUnknown\nUnknown\n1 UN national staff driver killed and 2 UN nat...\nArchived\nArchived\n\n\n8\n12\n1997-06-08\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n1\n0\n...\nCombat/Crossfire\nUnknown\n-1.499840\n29.634970\nIncidental\nUnknown\nUnknown\n1 INGO national staff killed when he was among...\nArchived\nArchived\n\n\n9\n8\n1997-06-14\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n1\n0\n0\n...\nIndividual attack\nHome\n-1.499840\n29.634970\nPolitical\nNon-state armed group: Unknown\nNot applicable\n1 UN national staff shot and killed in Ruhenge...\nArchived\nArchived\n\n\n10\n9\n1997-06-17\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n1\n0\n0\n...\nDetention\nUnknown\n-1.499840\n29.634970\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Ruhenge...\nArchived\nArchived\n\n\n\n\n5 rows × 39 columns",
    "crumbs": [
      "Home",
      "Technical Details",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "data_cleaning.html#save-cleaned-csv",
    "href": "data_cleaning.html#save-cleaned-csv",
    "title": "Data Cleaning",
    "section": "Save Cleaned CSV",
    "text": "Save Cleaned CSV\n\n\nCode\n# Save to a CSV file\ndf.to_csv(\"data/clean_data/cleaned_security_incidents.csv\", index=False)",
    "crumbs": [
      "Home",
      "Technical Details",
      "Data Cleaning"
    ]
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "DSAN-Viz Mini Project 2025",
    "section": "",
    "text": "test2\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Appendix"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Exploratory Data Analysis (EDA) serves as a foundational phase in data analysis, aimed at uncovering key patterns, distributions, and relationships within the security incident data. This step is not focused on producing polished visualizations, but rather on conducting a structured investigation of the dataset to guide future design and analytical decisions. The visual outputs generated during EDA are intended to support internal understanding and inform the development of the final interactive dashboard.\nCode\nimport geopandas as gpd\nimport plotly.express as px\nimport plotly.io as pio\n\npio.renderers.default = \"notebook\"\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nplt.rcParams[\"font.family\"] = \"Tahoma\"\nimport seaborn as sns\nimport warnings\n\n\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n\ndf = pd.read_csv(\"data/clean_data/cleaned_security_incidents.csv\", parse_dates=[\"date\"])\ndf.head(3)\n\n\n\n\n\n\n\n\n\nincident_id\ndate\ncountry_code\ncountry\nregion\ndistrict\ncity\nUN\nINGO\nICRC\n...\nattack_context\nlocation\nlatitude\nlongitude\nmotive\nactor_type\nactor_name\ndetails\nverified\nsource\n\n\n\n\n0\n5\n1997-02-14\nRW\nRwanda\nKigali\nKigali\nKigali\n1\n0\n0\n...\nIndividual attack\nUnknown\n-1.950851\n30.061508\nPolitical\nUnknown\nUnknown\n1 UN national staff shot and killed in Kigali ...\nArchived\nArchived\n\n\n1\n6\n1997-05-07\nSL\nSierra Leone\nTonkolili District\nUnknown\nMayamba\n3\n0\n0\n...\nAmbush\nRoad\n8.640035\n-11.840027\nUnknown\nUnknown\nUnknown\n1 UN national staff driver killed and 2 UN nat...\nArchived\nArchived\n\n\n2\n12\n1997-06-08\nRW\nRwanda\nNorthern\nMusanze\nRuhengeri\n0\n1\n0\n...\nCombat/Crossfire\nUnknown\n-1.499840\n29.634970\nIncidental\nUnknown\nUnknown\n1 INGO national staff killed when he was among...\nArchived\nArchived\n\n\n\n\n3 rows × 39 columns\nKey Column Categories:\nCode\n# Load the dataset\ndf = pd.read_csv(\"data/clean_data/cleaned_security_incidents.csv\", parse_dates=[\"date\"])\n\n# Total number of security incidents\ntotal_incidents = len(df)\n\n# Total deaths\ntotal_deaths = df[\"total_killed\"].sum()\n\n# Total kidnappings\ntotal_kidnappings = df[\"total_kidnapped\"].sum()\n\n# Total wounded\ntotal_wounded = df[\"total_wounded\"].sum()\n\n# Total affected\ntotal_affected = df[\"total_affected\"].sum()\n\n# Print the statistics\nprint(f\"Total Security Incidents: {total_incidents}\")\nprint(f\"Total Deaths: {total_deaths}\")\nprint(f\"Total Kidnappings: {total_kidnappings}\")\nprint(f\"Total Wounded: {total_wounded}\")\nprint(f\"Total Affected: {total_affected}\")\n\n\nTotal Security Incidents: 3949\nTotal Deaths: 2598\nTotal Kidnappings: 1976\nTotal Wounded: 2730\nTotal Affected: 7304",
    "crumbs": [
      "Home",
      "Technical Details",
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "eda.html#geospatial-data-analysis",
    "href": "eda.html#geospatial-data-analysis",
    "title": "Exploratory Data Analysis",
    "section": "Geospatial Data Analysis",
    "text": "Geospatial Data Analysis\n\nWhere are security incidents against aid workers most concentrated, and how do the characteristics of these incidents vary by location?\nThe exploration begins with a global visualization of all recorded security incidents involving aid workers. The map reveals concentrated clusters in conflict-affected regions such as Sub-Saharan Africa, the Middle East, and South Asia.\n\n\nCode\ndf_geo = df.dropna(subset=[\"latitude\", \"longitude\"])\n\ngdf = gpd.GeoDataFrame(\n    df_geo,\n    geometry=gpd.points_from_xy(df_geo[\"longitude\"], df_geo[\"latitude\"]),\n    crs=\"EPSG:4326\",\n)\n\nworld = gpd.read_file(\n    \"data/maps/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp\"\n)\nworld = world[~world[\"ADMIN\"].isin([\"Antarctica\", \"Oceania\"])]\n\nfig, ax = plt.subplots(figsize=(10, 10))\nworld.boundary.plot(ax=ax, linewidth=0.8, color=\"gray\")\ngdf.plot(ax=ax, markersize=10, alpha=0.4, color=\"red\")\nplt.title(\n    \"Global Distribution of Security Incidents Involving Aid Workers\", fontsize=16\n)\nplt.axis(\"on\")\nax.set_xlim(-130, 170)  # Adjusting x-limits to focus on the relevant regions\nax.set_ylim(-60, 70)  # Adjusting y-limits to focus on the relevant regions\nplt.xlabel(\"Longitude\", fontsize=12)\nplt.ylabel(\"Latitude\", fontsize=12)\nplt.show()\n\n\n\n\n\n\n\n\n\nThis map vizualization serves as a foundational view, a more interactive and visually enhanced version of the geospatial analysis will be featured in the project dashboard.\nTo further investigate the spatial distribution of security incidents, the dataset was aggregated to highlight the countries with the highest number of reported cases. Preliminary analysis reveals that South Sudan, Afghanistan, and Sudan report the largest number of incidents, followed by Syria, Somalia, and the Democratic Republic of the Congo. These nations consistently emerge as high-risk zones for aid workers.\n\n\nCode\ndf[\"country\"].value_counts().head(20).reset_index()\n\n\n\n\n\n\n\n\n\ncountry\ncount\n\n\n\n\n0\nSouth Sudan\n572\n\n\n1\nAfghanistan\n571\n\n\n2\nSudan\n342\n\n\n3\nSyrian Arab Republic\n342\n\n\n4\nSomalia\n268\n\n\n5\nDR Congo\n209\n\n\n6\nCentral African Republic\n141\n\n\n7\nOccupied Palestinian Territories\n137\n\n\n8\nMali\n124\n\n\n9\nPakistan\n110\n\n\n10\nYemen\n102\n\n\n11\nEthiopia\n102\n\n\n12\nNigeria\n79\n\n\n13\nMyanmar\n73\n\n\n14\nHaiti\n64\n\n\n15\nKenya\n60\n\n\n16\nSri Lanka\n53\n\n\n17\nIraq\n53\n\n\n18\nUkraine\n43\n\n\n19\nCameroon\n38\n\n\n\n\n\n\n\n\n\nDo certain countries have a higher fatality rate?\nWhile incident frequency highlights where aid workers are most often targeted, it does not necessarily capture the severity of those incidents. To gain a clearer picture, the total number of aid worker deaths was aggregated by country. Countries such as South Sudan and Syria not only experienced a high number of incidents but also accounted for a disproportionate share of total fatalities.\nTo adjust for differences in incident volume, the fatality rate—defined as the average number of deaths per incident—was calculated. This metric revealed that some countries, despite reporting fewer total incidents, exhibited significantly higher fatality rates. Such findings suggest particularly dangerous operating environments for aid workers in those regions.\n\n\nCode\ndf[\"total_deaths\"] = df[\"nationals_killed\"] + df[\"internationals_killed\"]\n\n# Group and sort the data\nfatal_by_country = (\n    df.groupby(\"country\")[\"total_deaths\"]\n    .sum()\n    .sort_values(ascending=False)\n    .head(10)\n    .reset_index()\n)\n\n# Plotly bar chart\nfig = px.bar(\n    fatal_by_country,\n    x=\"total_deaths\",\n    y=\"country\",\n    orientation=\"h\",\n    title=\"Top 10 Countries by Number of Aid Worker Deaths\",\n    color=\"total_deaths\",\n    color_continuous_scale=\"amp\",\n    labels={\"total_deaths\": \"Total Aid&lt;br&gt;Worker Deaths\", \"country\": \"Country\"},\n)\n\n# Reverse the y-axis so the largest is at the top\nfig.update_layout(\n    yaxis=dict(autorange=\"reversed\"),\n    title={\"font\": {\"weight\": \"bold\"}},\n    title_x=0.5,  # Center the title\n    width=800,  # Set the width of the chart\n    height=600,  # Set the height of the chart\n)\n\nfig.show()\n\n\n        \n        \n        \n\n\n                            \n                                            \n\n\nHowever, absolute counts don’t always tell the full story. To normalize for frequency of attacks, a fatality rate was calculated: average deaths per incident in each country.\n\n\nCode\n# Calculate fatality rate\nfatality_rate = (\n    df.groupby(\"country\")[[\"incident_id\", \"total_deaths\"]]\n    .agg({\"incident_id\": \"count\", \"total_deaths\": \"sum\"})\n    .assign(fatality_rate=lambda x: x[\"total_deaths\"] / x[\"incident_id\"])\n    .sort_values(\"fatality_rate\", ascending=False)\n    .head(10)\n)\n\n# Create a Plotly bar chart\nfig = px.bar(\n    fatality_rate,\n    x=\"fatality_rate\",\n    y=fatality_rate.index,\n    orientation=\"h\",  # Horizontal bar chart\n    color=\"fatality_rate\",  # Color based on fatality rate\n    color_continuous_scale=\"Burg\",  # Use a blue color scale\n    labels={\"fatality_rate\": \"Average Deaths&lt;br&gt;per Incident\", \"y\": \"Country\"},\n    title=\"Countries with Highest Fatality Rate per Incident\",\n)\n\n# Update layout for better appearance\nfig.update_layout(\n    xaxis_title=\"Average Deaths per Incident\",\n    yaxis_title=\"Country\",\n    yaxis=dict(autorange=\"reversed\"),\n    coloraxis_showscale=True,  # Show color scale\n    title_x=0.5,  # Center the title\n    title={\"font\": {\"weight\": \"bold\"}},\n    width=800,  # Set the width of the chart\n    height=600,  # Set the height of the chart\n)\n\n# Show the chart\nfig.show()\n\n\n                            \n                                            \n\n\nThis refined analysis underscores the importance of considering not just frequency but also severity. Some countries—such as Algeria, Azerbaijan, and Angola—stand out for having exceptionally high fatality rates per incident. While these locations may not top the list in terms of total incidents, their environments appear particularly deadly, potentially due to more targeted or violent attacks. This pattern raises concern about the types of threats aid workers face in different contexts and suggests that smaller conflict zones may carry outsized risks.\n\nFatality Rate Significance by Country Grouping\nTo statistically determine if fatality rates differ significantly by country, the Kruskal-Wallis H test was selected. This non-parametric alternative to one-way ANOVA is appropriate for comparing multiple groups when normality and equal variance assumptions are not met. Preliminary visual inspection of the fatality rate distributions across countries (not shown here due to high granularity) revealed non-normal shapes, uneven group sizes, and several outliers—conditions that support the use of a rank-based method like Kruskal-Wallis.\n\n\nCode\nfrom scipy.stats import kruskal\n\ndf[\"total_deaths\"] = df[\"nationals_killed\"] + df[\"internationals_killed\"]\n\n# Compute fatality rate per country\nfatality_rate = (\n    df.groupby(\"country\")[[\"incident_id\", \"total_deaths\"]]\n    .agg({\"incident_id\": \"count\", \"total_deaths\": \"sum\"})\n    .assign(fatality_rate=lambda x: x[\"total_deaths\"] / x[\"incident_id\"])\n)\n\n# Merge back into original df\ndf = df.merge(fatality_rate[\"fatality_rate\"], on=\"country\", how=\"left\")\n\n# Group by country for the Kruskal-Wallis test\ngroups = [\n    group[\"fatality_rate\"].dropna().values for name, group in df.groupby(\"country\")\n]\n\n# Run the test\nkruskal_result = kruskal(*groups)\nprint(kruskal_result)\n\n\nKruskalResult(statistic=3948.000000000001, pvalue=0.0)\n\n\nThe Kruskal-Wallis test returned a highly significant result (H = 3948.00, p &lt; 0.001), providing strong statistical evidence that average fatality rates differ significantly between countries. This finding indicates that certain countries pose disproportionately higher risks to aid workers—not only through frequent incidents, but through incidents that are markedly more deadly. These differences underscore the uneven distribution of threat severity across national contexts and may reflect variations in conflict intensity, governance, or targeting of humanitarian personnel.\n\n\n\nIs Location a Significant Predictor of Fatal Incidents?\nWhile previous analyses revealed stark differences in fatality rates across countries, these comparisons do not account for confounding factors like actor type or motive. To isolate the role of geography, a logistic regression was conducted to model the probability of an incident being fatal (i.e., involving at least one aid worker death) based on country, actor type, and motive.\n\n\nCode\nimport statsmodels.formula.api as smf\n\n# Binary outcome for fatality\ndf[\"is_fatal\"] = (df[\"total_deaths\"] &gt; 0).astype(int)\n\n# Simplify country and actor_type to top categories to avoid overfitting\ntop_countries = df[\"country\"].value_counts().head(10).index\ndf[\"country_simplified\"] = df[\"country\"].where(\n    df[\"country\"].isin(top_countries), \"Other\"\n)\n\ntop_actors = df[\"actor_type\"].value_counts().head(10).index\ndf[\"actor_simplified\"] = df[\"actor_type\"].where(\n    df[\"actor_type\"].isin(top_actors), \"Other\"\n)\n\n# Prepare modeling dataset\nmodel_df = df[[\"is_fatal\", \"country_simplified\", \"actor_simplified\", \"motive\"]].dropna()\n\n# Fit logistic regression model\nmodel = smf.logit(\n    formula=\"is_fatal ~ C(country_simplified) + C(actor_simplified) + C(motive)\",\n    data=model_df,\n).fit()\n\n# Display summary\nprint(model.summary())\n\n\nOptimization terminated successfully.\n         Current function value: 0.619793\n         Iterations 6\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:               is_fatal   No. Observations:                 3949\nModel:                          Logit   Df Residuals:                     3923\nMethod:                           MLE   Df Model:                           25\nDate:                Sun, 06 Apr 2025   Pseudo R-squ.:                 0.09026\nTime:                        22:59:11   Log-Likelihood:                -2447.6\nconverged:                       True   LL-Null:                       -2690.4\nCovariance Type:            nonrobust   LLR p-value:                 7.112e-87\n=============================================================================================================================\n                                                                coef    std err          z      P&gt;|z|      [0.025      0.975]\n-----------------------------------------------------------------------------------------------------------------------------\nIntercept                                                    -0.3876      0.358     -1.081      0.280      -1.090       0.315\nC(country_simplified)[T.Central African Republic]             0.1992      0.203      0.981      0.326      -0.199       0.597\nC(country_simplified)[T.DR Congo]                            -0.2270      0.181     -1.253      0.210      -0.582       0.128\nC(country_simplified)[T.Mali]                                -1.1731      0.261     -4.488      0.000      -1.685      -0.661\nC(country_simplified)[T.Occupied Palestinian Territories]     0.9867      0.249      3.962      0.000       0.499       1.475\nC(country_simplified)[T.Other]                               -0.2416      0.115     -2.097      0.036      -0.467      -0.016\nC(country_simplified)[T.Pakistan]                             0.1779      0.217      0.819      0.413      -0.248       0.604\nC(country_simplified)[T.Somalia]                              0.5422      0.162      3.349      0.001       0.225       0.860\nC(country_simplified)[T.South Sudan]                         -0.0253      0.132     -0.191      0.848      -0.285       0.234\nC(country_simplified)[T.Sudan]                                0.0491      0.146      0.336      0.737      -0.237       0.335\nC(country_simplified)[T.Syrian Arab Republic]                 0.3481      0.155      2.239      0.025       0.043       0.653\nC(actor_simplified)[T.Foreign or coalition forces]            0.8923      0.311      2.867      0.004       0.282       1.502\nC(actor_simplified)[T.Host state]                             0.4488      0.317      1.415      0.157      -0.173       1.070\nC(actor_simplified)[T.Non-state armed group: National]        0.1219      0.286      0.426      0.670      -0.438       0.682\nC(actor_simplified)[T.Non-state armed group: Regional]        0.4998      0.309      1.615      0.106      -0.107       1.106\nC(actor_simplified)[T.Non-state armed group: Subnational]     0.4047      0.315      1.284      0.199      -0.213       1.022\nC(actor_simplified)[T.Non-state armed group: Unknown]         0.1150      0.282      0.407      0.684      -0.439       0.669\nC(actor_simplified)[T.Other]                                 -0.4039      0.323     -1.252      0.211      -1.036       0.228\nC(actor_simplified)[T.Police or paramilitary]                -0.4956      0.365     -1.356      0.175      -1.212       0.221\nC(actor_simplified)[T.Unaffiliated]                          -0.2312      0.303     -0.764      0.445      -0.824       0.362\nC(actor_simplified)[T.Unknown]                                0.6939      0.260      2.673      0.008       0.185       1.203\nC(motive)[T.Economic]                                        -1.5793      0.258     -6.111      0.000      -2.086      -1.073\nC(motive)[T.Incidental]                                       0.2529      0.237      1.067      0.286      -0.212       0.717\nC(motive)[T.Other]                                           -1.5408      0.687     -2.244      0.025      -2.886      -0.195\nC(motive)[T.Political]                                       -0.1772      0.238     -0.743      0.457      -0.645       0.290\nC(motive)[T.Unknown]                                         -0.3919      0.235     -1.670      0.095      -0.852       0.068\n=============================================================================================================================\n\n\n\n\nCode\nsummary_frame = model.summary2().tables[1].copy()\nimport plotly.graph_objects as go\nimport numpy as np\n\n# Filter for just the country coefficients (they start with C(country_simplified)[T.])\ncountry_terms = summary_frame.loc[\n    summary_frame.index.str.startswith(\"C(country_simplified)[T.\")\n].copy()\ncountry_terms.index = country_terms.index.str.extract(\n    r\"C\\(country_simplified\\)\\[T\\.(.*)\\]\"\n)[\n    0\n]  # Clean names\n\n# Compute odds ratios and 95% CI\ncountry_terms[\"odds_ratio\"] = np.exp(country_terms[\"Coef.\"])\ncountry_terms[\"ci_lower\"] = np.exp(country_terms[\"[0.025\"])\ncountry_terms[\"ci_upper\"] = np.exp(country_terms[\"0.975]\"])\n\n# Sort for prettier plot\ncountry_terms = country_terms.sort_values(\"odds_ratio\", ascending=False)\n\n# Create error bars\nerror_lower = country_terms[\"odds_ratio\"] - country_terms[\"ci_lower\"]\nerror_upper = country_terms[\"ci_upper\"] - country_terms[\"odds_ratio\"]\n\n# Create the Plotly bar chart\nfig = go.Figure()\n\nfig.add_trace(\n    go.Bar(\n        x=country_terms[\"odds_ratio\"],\n        y=country_terms.index,\n        orientation=\"h\",  # Horizontal bar chart\n        marker=dict(color=country_terms[\"odds_ratio\"], colorscale=\"Viridis\"),\n        error_x=dict(\n            type=\"data\",\n            symmetric=False,\n            array=error_upper,  # Upper error\n            arrayminus=error_lower,  # Lower error\n            color=\"black\",\n            thickness=1.5,\n            width=3,\n        ),\n        name=\"Odds Ratio\",\n    )\n)\n\n# Add a vertical reference line at x=1\nfig.add_vline(\n    x=1,\n    line=dict(color=\"gray\", dash=\"dash\"),\n    annotation_text=\"Reference (x=1)\",\n    annotation_position=\"top left\",\n)\n\n# Update layout\nfig.update_layout(\n    title={\n        \"text\": \"Odds Ratios for Fatal Incidents by Country&lt;br&gt;(Controlling for Actor Type and Motive)\",\n        \"x\": 0.5,  # Center the title\n        \"xanchor\": \"center\",\n        \"yanchor\": \"top\",\n        \"font\": {\"weight\": \"bold\"},\n    },\n    yaxis=dict(autorange=\"reversed\"),\n    xaxis_title=\"Odds Ratio (Fatal vs. Non-Fatal)\",\n    yaxis_title=\"Country\",\n    xaxis=dict(showgrid=True, zeroline=True),\n    height=600,  # Adjust height for better readability\n    width=800,  # Adjust width for better readability\n)\n\n# Show the chart\nfig.show()\n\n\n                            \n                                            \n\n\nFor the logistic regression model, only the top 10 countries by incident frequency were retained. This decision was made to balance interpretability, model stability, and statistical power. Including every country would have introduced excessive sparsity and risked overfitting due to uneven data distribution. The same approach was applied to actor types and motives to ensure each category had sufficient representation for meaningful inference.\nThe logistic regression model revealed several important patterns:\n\nGeography remains a significant predictor of fatal incidents, even after adjusting for the actor type and motive.\nIncidents in the Occupied Palestinian Territories, Somalia, and the Syrian Arab Republic were associated with significantly higher odds of resulting in death.\nBy contrast, Mali showed a statistically significant decrease in fatality likelihood, despite its high number of recorded incidents.\nAmong actor types, foreign or coalition forces and unknown actors had the strongest associations with fatal outcomes.\nInterestingly, motives classified as economic or other were associated with lower odds of a fatality, suggesting that incidents driven by opportunism or unclear motives may be less lethal than those with explicitly political or ideological aims.",
    "crumbs": [
      "Home",
      "Technical Details",
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "llm-usage.html",
    "href": "llm-usage.html",
    "title": "DSAN-Viz Mini Project 2025",
    "section": "",
    "text": "FOR help cusotmizing the leafly map for help with the photos on the main page, html formatting\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Technical Details",
      "LLM Usage Log"
    ]
  },
  {
    "objectID": "eda.html#temporal-behavioral-analysis",
    "href": "eda.html#temporal-behavioral-analysis",
    "title": "Exploratory Data Analysis",
    "section": "Temporal & Behavioral Analysis",
    "text": "Temporal & Behavioral Analysis\n\nAre some actor types more violent than others?\nTo understand which perpetrators pose the greatest threat to aid worker safety, incidents were grouped by actor type and examined for differences in average deaths per incident. Actor classifications follow the AWSD’s typology{target = _blank}, which distinguishes between unaffiliated individuals, aid recipients, staff members, organized criminal groups, and a spectrum of non-state armed groups—ranging from global entities like Al-Qaeda and the Islamic State, to regional and subnational militias, as well as various state actors including host governments and foreign coalitions.\n\n\nCode\n# Calculate average deaths per incident by actor type\nactor_violence = (\n    df.groupby(\"actor_type\")[\"total_deaths\"]\n    .mean()\n    .sort_values(ascending=False)\n    .head(10)\n)\n\n# Create a Plotly bar chart\nfig = px.bar(\n    actor_violence.reset_index(),  # Reset index to convert Series to DataFrame\n    x=\"total_deaths\",\n    y=\"actor_type\",\n    orientation=\"h\",  # Horizontal bar chart\n    color=\"total_deaths\",  # Color based on average deaths\n    color_continuous_scale=\"Sunsetdark\",  # Use the Magma color palette\n    labels={\n        \"total_deaths\": \"Average Deaths&lt;br&gt;per Incident\",\n        \"actor_type\": \"Actor Type\",\n    },\n    title=\"Average Aid Worker Deaths per Incident by Actor Type\",\n)\n\n# Update layout for better appearance\nfig.update_layout(\n    xaxis_title=\"Average Deaths per Incident\",\n    yaxis=dict(autorange=\"reversed\"),\n    yaxis_title=\"Actor Type\",\n    coloraxis_showscale=True,  # Show color scale\n    title_x=0.5,  # Center the title\n    title={\"font\": {\"weight\": \"bold\"}},\n    height=600,  # Adjust height for better readability\n    width=800,  # Adjust width for better readability\n)\n\n# Show the chart\nfig.show()\n\n\n                            \n                                            \n\n\nThe resulting visualization reveals that globally operating non-state armed groups—defined in the codebook as groups with a wide operational scope and ideological reach—are associated with the highest average death toll per event. This aligns with their capacity for coordinated, high-casualty attacks such as bombings and complex raids. State actors with ambiguous identification (“State: unknown”) and foreign or coalition forces also show elevated fatality levels, potentially reflecting high-impact operations in contested areas where humanitarian workers are inadvertently or deliberately harmed.\nBy contrast, incidents involving subnational groups (localized militias), unaffiliated individuals, and aid recipients result in fewer deaths on average, suggesting more opportunistic or limited-scale violence. These patterns emphasize that not all actor types represent equal risk, and that the severity of incidents is closely tied to the perpetrator’s organizational capacity, motive, and operational scale.\n### Has the nature of attacks changed over time? To examine evolving tactics in violence against aid workers, incident data were grouped by year and by the reported “means of attack.” This field categorizes incidents into modalities such as shootings, kidnappings, shelling, and explosive devices, as defined in the AWSD codebook.\n\n\nCode\ndf[\"year\"] = df[\"date\"].dt.year\n# Group and count incidents by year and attack type\ndf_yearly = df.groupby([\"year\", \"means_of_attack\"]).size().reset_index(name=\"count\")\n\n# Plotly line chart\nfig = px.line(\n    df_yearly,\n    x=\"year\",\n    y=\"count\",\n    color=\"means_of_attack\",\n    title=\"Trends in Means of Attack Over Time\",\n    labels={\"count\": \"Number of Incidents\", \"year\": \"Year\"},\n)\n\nfig.update_layout(\n    legend_title_text=\"Means of Attack\", title_x=0.5, title={\"font\": {\"weight\": \"bold\"}}\n)\nfig.show()\n\n\n                            \n                                            \n\n\nThe line chart reveals that shootings and kidnappings have consistently dominated as the most common means of attack across the study period, with notable surges between 2010 and 2021. These tactics reflect targeted, often opportunistic forms of violence, which can occur in both high- and low-intensity conflict zones.\nOver time, the diversity of attack types has increased, with more frequent reports of complex attacks, improvised explosive devices (IEDs), and bodily assaults in recent years. This shift may reflect changes in both operational contexts and perpetrator capabilities, particularly in protracted conflict settings. Additionally, the decline in certain types of attacks after 2021 may be influenced by reporting delays or access restrictions in insecure environments, rather than a true decrease in violence.\n\n\nHow has the expected lethality of attacks evolved?\nWhile the frequency of incidents offers insight into exposure risk, analyzing fatality rate—the average number of deaths per incident—provides a measure of attack severity.\n\n\nCode\n# Calculate yearly fatality rate\ndf[\"year\"] = df[\"date\"].dt.year\nyearly_fatality_rate = (\n    df.groupby(\"year\")[[\"total_deaths\", \"incident_id\"]]\n    .agg({\"total_deaths\": \"sum\", \"incident_id\": \"count\"})\n    .assign(fatality_rate=lambda x: x[\"total_deaths\"] / x[\"incident_id\"])\n)\n\n# Create a Plotly line chart\nfig = px.line(\n    yearly_fatality_rate.reset_index(),  # Reset index to make 'year' a column\n    x=\"year\",\n    y=\"fatality_rate\",\n    markers=True,  # Add markers to the line\n    labels={\"year\": \"Year\", \"fatality_rate\": \"Average Deaths per Incident\"},\n    title=\"Average Fatality Rate Over Time\",\n)\n\n# Update layout for better appearance\nfig.update_layout(\n    xaxis_title=\"Year\",\n    yaxis_title=\"Average Deaths per Incident\",\n    title_x=0.5,  # Center the title,\n    title={\"font\": {\"weight\": \"bold\"}},  # Make the title bold\n    height=500,  # Adjust height\n    width=800,  # Adjust width\n)\n\n# Show the chart\nfig.show()\n\n\n                            \n                                            \n\n\nThe plot below reveals that the late 1990s and early 2000s saw the deadliest incidents, with a marked decline in fatality rates through the 2010s. This reduction suggests a potential shift in perpetrator intent—from lethal force toward intimidation or capture—or may reflect the effectiveness of improved security protocols, such as the adoption of armored vehicles, enhanced training, and security escorts. However, the occasional spikes observed in more recent years, particularly post-2015, indicate that extremely deadly incidents remain a persistent threat.\n### Has the number of attacks increased over time? A longitudinal view of overall incident frequency reveals a pronounced rise in the number of recorded security incidents since the early 2000s. Following a relatively stable period in the 1990s, incidents sharply increased around 2005, with intermittent peaks in the 2010s and 2020s.\n\n\nCode\n# Calculate the number of incidents per year\nincident_counts = df[\"year\"].value_counts().sort_index()\n\n# Create a Plotly line chart\nfig = px.line(\n    x=incident_counts.index,\n    y=incident_counts.values,\n    markers=True,  # Add markers to the line\n    labels={\"x\": \"Year\", \"y\": \"Number of Incidents\"},\n    title=\"Number of Security Incidents Over Time\",\n)\n\n# Update layout for better appearance\nfig.update_layout(\n    xaxis_title=\"Year\",\n    yaxis_title=\"Number of Incidents\",\n    title={\"font\": {\"weight\": \"bold\"}},\n    title_x=0.5,  # Center the title\n    height=500,  # Adjust height\n    width=800,  # Adjust width\n)\n\n# Show the chart\nfig.show()",
    "crumbs": [
      "Home",
      "Technical Details",
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "eda.html#victim-demographics-analysis",
    "href": "eda.html#victim-demographics-analysis",
    "title": "Exploratory Data Analysis",
    "section": "Victim Demographics Analysis",
    "text": "Victim Demographics Analysis\n\nHow do fatalities compare between national and international aid workers?\nTo assess disparities in victimization by nationality, the dataset was disaggregated by aid worker type—nationals versus internationals—and the total number of deaths in each category was calculated. The visualization reveals a stark contrast: nationals account for the overwhelming majority of aid worker deaths, with fatalities exceeding those of internationals by more than tenfold.\n\n\nCode\n# Summing up the deaths by victim type\nvictim_type = df[[\"nationals_killed\", \"internationals_killed\"]].sum().reset_index()\nvictim_type.columns = [\"Victim Type\", \"Total Deaths\"]\nvictim_type[\"Victim Type\"] = (\n    victim_type[\"Victim Type\"].str.replace(\"_killed\", \"\").str.title()\n)\n\nfig = px.bar(\n    victim_type,\n    x=\"Victim Type\",\n    y=\"Total Deaths\",\n    title=\"Total Deaths by Victim Nationality\",\n    color=\"Victim Type\",  # Use Victim Type for categorical coloring\n    color_discrete_sequence=px.colors.qualitative.Set2,  # Use a qualitative color palette\n)\n\n# Update layout for better appearance\nfig.update_layout(\n    title_x=0.5,  # Center the title\n    title={\"font\": {\"weight\": \"bold\"}},  # Bold title\n    showlegend=False,  # Hide legend since the x-axis already shows the categories\n)\n\n# Show the chart\nfig.show()\n\n\n                            \n                                            \n\n\nTo evaluate whether this observed difference is statistically significant, a Mann-Whitney U test was conducted. This non-parametric test was selected due to the non-normal distribution of deaths in both groups, as confirmed by Shapiro-Wilk tests (p &lt; 0.001 for both variables).\n\n\nCode\nfrom scipy.stats import shapiro\n\n# Drop rows with missing values in either column\nfiltered = df[[\"nationals_killed\", \"internationals_killed\"]].dropna()\nshapiro_nationals = shapiro(filtered[\"nationals_killed\"])\nshapiro_internationals = shapiro(filtered[\"internationals_killed\"])\nshapiro_nationals, shapiro_internationals\n\n\n(ShapiroResult(statistic=0.393780290534544, pvalue=1.3424234758046658e-78),\n ShapiroResult(statistic=0.12203089068707418, pvalue=1.1407863760023542e-86))\n\n\n\n\nCode\nfrom scipy.stats import mannwhitneyu\n\n# Perform the Mann-Whitney U test\nstat, p = mannwhitneyu(\n    filtered[\"nationals_killed\"],\n    filtered[\"internationals_killed\"],\n    alternative=\"two-sided\",\n)\nprint(f\"Mann-Whitney U Test:\\nStatistic = {stat:.2f}, p-value = {p:.4f}\")\n\n\nMann-Whitney U Test:\nStatistic = 10604028.00, p-value = 0.0000\n\n\nThe results of the Mann-Whitney U test (U = 10,604,028, p &lt; 0.001) indicate a statistically significant difference in the distribution of deaths between nationals and internationals. This confirms that nationals are not only more frequently targeted but also disproportionately impacted in fatal incidents.\nThese findings underscore the heightened vulnerability of national aid workers, who often operate in frontline or remote environments with less institutional protection compared to their international counterparts (gisf2024?). This disparity has important implications for risk assessment frameworks, duty of care standards, and targeted security interventions.\n\n\nAre international staff targeted more lethally than national staff?\n\n\nCode\n# Create new column for whether any internationals were killed\ndf[\"intl_victims_present\"] = df[\"internationals_killed\"] &gt; 0\n\n# Group by whether internationals were present and calculate average fatalities\nfatality_by_victim_type = (\n    df.groupby(\"intl_victims_present\")[\"total_deaths\"].mean().reset_index()\n)\nfatality_by_victim_type[\"intl_victims_present\"] = fatality_by_victim_type[\n    \"intl_victims_present\"\n].map({True: \"Internationals Present\", False: \"Only Nationals\"})\n\nfig = px.bar(\n    fatality_by_victim_type,\n    x=\"intl_victims_present\",\n    y=\"total_deaths\",\n    title=\"Average Fatalities: Incidents with International Staff vs. Only Nationals\",\n    labels={\n        \"total_deaths\": \"Avg. Deaths per Incident\",\n        \"intl_victims_present\": \"Victim Type\",\n    },\n    color=\"intl_victims_present\",\n    color_discrete_sequence=px.colors.qualitative.Antique,\n)\nfig.update_layout(\n    title_x=0.5,  # Center the title\n    title={\"font\": {\"weight\": \"bold\"}},  # Bold title\n    showlegend=False,  # Hide legend since x-axis already labels the categories\n)\n\n# Show the chart\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nAre certain organization types more frequently targeted?\n\n\nCode\norg_cols = [\"UN\", \"INGO\", \"ICRC\", \"NRCS and IFRC\", \"NNGO\", \"other\"]\n\n# Sum the incident involvement for each org type\norg_totals = df[org_cols].sum().reset_index()\norg_totals.columns = [\"Organization\", \"Total Incidents\"]\n# Sort by Total Incidents (descending)\norg_totals_sorted = org_totals.sort_values(by=\"Total Incidents\", ascending=False)\n\nfig = px.bar(\n    org_totals_sorted,\n    x=\"Total Incidents\",\n    y=\"Organization\",\n    orientation=\"h\",\n    title=\"Incidents by Organization Type\",\n    color=\"Total Incidents\",\n    color_continuous_scale=\"Viridis\",\n)\n\n# Reverse y-axis so largest is at top\nfig.update_layout(\n    yaxis=dict(autorange=\"reversed\"), title_x=0.5, title={\"font\": {\"weight\": \"bold\"}}\n)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nAre male or female aid workers more frequently affected?\n\n\nCode\ngender_cols = [\"gender_male\", \"gender_female\", \"gender_unknown\"]\ngender_totals = df[gender_cols].sum().reset_index()\ngender_totals.columns = [\"Gender\", \"Total Victims\"]\ngender_totals[\"Gender\"] = gender_totals[\"Gender\"].str.replace(\"gender_\", \"\").str.title()\n\n# Create a bar chart with categorical coloring\nfig = px.bar(\n    gender_totals,\n    x=\"Gender\",\n    y=\"Total Victims\",\n    title=\"Total Victims by Gender\",\n    color=\"Gender\",  # Use Gender for categorical coloring\n    color_discrete_sequence=px.colors.qualitative.Safe,  # Use the Safe color palette\n)\n\n# Update layout for better appearance\nfig.update_layout(\n    title_x=0.5,  # Center the title\n    title={\"font\": {\"weight\": \"bold\"}},  # Bold title\n    showlegend=False,  # Hide legend since x-axis already labels the categories\n)\n\n# Show the chart\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nDo incidents involving women result in higher fatality rates?\n\n\nCode\n# Calculate average deaths for incidents where females were involved vs. not\ndf[\"female_involved\"] = df[\"gender_female\"] &gt; 0\navg_fatality_by_female = (\n    df.groupby(\"female_involved\")[\"total_deaths\"].mean().reset_index()\n)\navg_fatality_by_female[\"female_involved\"] = avg_fatality_by_female[\n    \"female_involved\"\n].map({True: \"Female Victims Involved\", False: \"No Female Victims\"})\n\nfig = px.bar(\n    avg_fatality_by_female,\n    x=\"female_involved\",\n    y=\"total_deaths\",\n    title=\"Average Fatalities Based on Female Victim Presence\",\n    labels={\"total_deaths\": \"Average Deaths&lt;br&gt;per Incident\"},\n    color=\"total_deaths\",\n    color_continuous_scale=\"Reds\",\n)\nfig.update_layout(title_x=0.5)\nfig.show()",
    "crumbs": [
      "Home",
      "Technical Details",
      "Exploratory Data Analysis"
    ]
  },
  {
    "objectID": "index.html#aid-in-action",
    "href": "index.html#aid-in-action",
    "title": "Analyzing Trends and Patterns in Security Incidents Affecting Aid Workers: A Comprehensive Study Using the Aid Worker Security Database",
    "section": "",
    "text": "←\n\n&lt;img src=\"images/not_a_target.png\" alt=\"Not a Target\" /&gt;\n&lt;img src=\"images/sudan.png\" alt=\"Sudan\" /&gt;\n&lt;img src=\"images/unhcr.png\" alt=\"UNHCR\" /&gt;\n&lt;img src=\"images/world_vision.png\" alt=\"World Vision\" /&gt;\n\n→",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#introduction-motivation",
    "href": "index.html#introduction-motivation",
    "title": "Humanitarian Shield:",
    "section": "Introduction & Motivation",
    "text": "Introduction & Motivation\nIn recent years, the humanitarian sector has experienced a significant rise in security incidents targeting aid workers. In 2024, 378 humanitarian agents lost their lives—a 35% increase from 281 fatalities in 2023 (Westbury 2025). These incidents, primarily occurring in crisis regions like Gaza, Ukraine, and Sudan, indicate a disturbing trend of increased violence despite international protections.\n\n\n\n\n\n\nNote\n\n\n\nThe absolute fatality numbers derived from my cleaned dataset slightly differ from external sources, (Westbury 2025), likely due to dropped columns during cleaning and inherent data recording discrepancies common in crisis contexts. However, the percentage increase from 2023 to 2024 (approximately 34%) closely aligns with the reported figure of 35%.\n\n\nThe rising threat to humanitarian workers reveals significant shortcomings in current security risk management (SRM) protocols. National staff, crucial to daily humanitarian operations, face the highest risk but often lack access to adequate protective measures available to international colleagues. In 2023, national staff comprised 95.6% of all victims of humanitarian violence, highlighting a critical safety disparity (Westbury 2025).\nFurthermore, structural inequalities persist in humanitarian funding mechanisms. Despite commitments under the Grand Bargain to allocate 25% of funds directly to local and national actors, only 4.4% reached these groups in 2023, with merely 0.6% delivered without intermediaries (Westbury 2025; Jha 2025). Such underinvestment significantly reduces frontline workers’ access to essential resources, exacerbating their vulnerabilities in crises (Jha 2025).\nThis project utilizes data from the Aid Worker Security Database (AWSD), which meticulously documents violence against humanitarian workers (Humanitarian Outcomes 2025). By analyzing geographic and temporal patterns, victim profiles, and attack types, this study aims to identify critical vulnerabilities and predictors of violence. Employing exploratory analysis, geospatial mapping, statistical tests, and clustering techniques, the project provides insights to improve strategic, equitable, and effective SRM practices.\nInsights derived from this study will significantly benefit humanitarian organizations, security policymakers, and donor agencies committed to enhancing frontline aid worker safety.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#key-research-questions",
    "href": "index.html#key-research-questions",
    "title": "Humanitarian Shield:",
    "section": "Key Research Questions",
    "text": "Key Research Questions\nGeospatial Patterns\n\nWhere are security incidents against aid workers most concentrated, and how do the characteristics of these incidents vary by location?\nDo certain countries have a higher fatality rate?\nIs location a significant predictor of fatal incidents?\n\nTemporal & Behavioral Trends\n\nAre some actor types more violent than others?\nHow has the expected lethality of attacks evolved over time?\n\nVictim Demographics\n\nHow do fatalities compare between national and international aid workers?\nAre international staff targeted more lethally than national staff?\nAre certain organization types more frequently targeted?\nAre male or female aid workers more frequently affected?\nDo incidents involving women result in higher fatality rates?",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#what-to-expect",
    "href": "index.html#what-to-expect",
    "title": "Humanitarian Shield:",
    "section": "What to Expect",
    "text": "What to Expect\nThis project site is organized to guide you through a narrative-driven analysis of aid worker security incidents:\n\nHome – Overview, project motivation, and key research questions.\nDashboard – Interactive visualizations exploring spatial, temporal, and demographic patterns of violence.\nAnalysis – Deeper statistical findings and interpretations aligned with each research question.\nTechnical Details – Description of data sources, data cleaning processes, and exploratory data analysis (EDA).\nReferences – Cited sources, including datasets and publications used throughout the project.\nAppendix – Supplementary charts, code snippets, or background notes not included in the main analysis.",
    "crumbs": [
      "Home"
    ]
  }
]