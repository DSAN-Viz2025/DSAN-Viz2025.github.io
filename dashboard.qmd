---
format: 
    dashboard:
        engine: jupyter
        embed-resources: true
        orientation: rows
title: Dashboard
---

```{python}
import folium
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
import plotly.express as px
import plotly.io as pio

pio.templates.default = "plotly"
from folium.features import GeoJsonTooltip
from branca.colormap import linear

```


# Overview 


## Row {height=25%}
### Column  (width = 20%)

```{python}
# | content: valuebox
# | title: "Total Incidents"
dict(icon="shield-check", value="3,949", color="primary")
```

### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Deaths"
dict(icon="heart-pulse", value=2598, color="danger")
```


### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Kidnappings"
dict(icon="activity", value="1,976", color="warning")
```

### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Wounded"
dict(icon="bandaid", value="2,730", color="info")
```

### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Affected"
dict(icon="people", value="7,304", color="success")

```

## Row 
### Column {width=55%}
```{python}
# | echo: false
# | title: "Global Security Incidents"

# Load data
df = pd.read_csv("data/clean_data/cleaned_security_incidents.csv", parse_dates=["date"])

df_geo = df.dropna(subset=["latitude", "longitude"])

# Create GeoDataFrame
gdf = gpd.GeoDataFrame(
    df_geo,
    geometry=gpd.points_from_xy(df_geo["longitude"], df_geo["latitude"]),
    crs="EPSG:4326",
)

# Load world shapefile
world = gpd.read_file(
    "data/maps/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp"
)
world = world[~world["ADMIN"].isin(["Antarctica"])]

# Aggregate incidents by country
incident_counts = gdf.groupby("country")["incident_id"].count().reset_index()
incident_counts.columns = ["country", "incident_count"]

# Merge incident counts with the world GeoDataFrame
world = world.merge(incident_counts, left_on="ADMIN", right_on="country", how="left")
world["incident_count"] = world["incident_count"].fillna(0)

#  Create a colormap
colormap = linear.YlOrRd_09.scale(
    world["incident_count"].min(), world["incident_count"].max()
)
access_token = "W6JbvTF90SFDXS2oNA2GA5k09njOlfZqefrP0mKamuMEhYhm1uUaxRNAbTyMDDrV"

m = folium.Map(
    location=[10, 20],
    zoom_start=1.5,
    min_zoom=2.5,
    max_bounds=True,
    tiles=None,  # Set to None so we can use a custom TileLayer
)

_ = folium.TileLayer(
    tiles=f"https://tile.jawg.io/jawg-lagoon/{{z}}/{{x}}/{{y}}.png?access-token={access_token}",
    attr='Tiles © <a href="http://jawg.io" target="_blank">Jawg</a>',
    name="Jawg Lagoon",
    control=True,
).add_to(m)


# Choropleth styling
def style_function(feature):
    count = feature["properties"]["incident_count"]
    return {
        "fillColor": colormap(count),
        "color": "black",
        "weight": 0.5,
        "fillOpacity": 0.7,
    }


# Tooltip
tooltip = GeoJsonTooltip(
    fields=["ADMIN", "incident_count"],
    aliases=["<strong>Country</strong>", "<strong>Incidents</strong>"],
    localize=True,
    sticky=True,
    style=(
        "background-color: white; color: #333; font-family: sans-serif; font-size: 13px; "
        "padding: 5px; border-radius: 5px; box-shadow: 1px 1px 2px rgba(0,0,0,0.25);"
    ),
)

# Add choropleth
_ = folium.GeoJson(
    world, name="Choropleth", style_function=style_function, tooltip=tooltip
).add_to(m)

# Add individual incident markers
for _, row in gdf.iterrows():
    popup_html = f"""
    <strong>Date:</strong> {row['date'].strftime('%Y-%m-%d')}<br>
    <strong>Region:</strong> {row['region']}<br>
    <strong>Means of Attack:</strong> {row['means_of_attack']}<br>
    <strong>Killed:</strong> {row['total_killed']}<br>
    <strong>Wounded:</strong> {row['total_wounded']}<br>
    <strong>Kidnapped:</strong> {row['total_kidnapped']}
    """

    _ = folium.Circle(
        location=[row.geometry.y, row.geometry.x],
        radius=15000,  # in meters; adjust as needed
        color="#3f51b5",
        fill=True,
        fill_color="#3f51b5",
        fill_opacity=0.5,
        popup=folium.Popup(popup_html, max_width=300),
    ).add_to(m)

colormap.caption = "Number of Security Incidents"
color_html = colormap._repr_html_()

# Wrap the colormap in a floating div and position it bottom-left
_ = m.get_root().html.add_child(
    folium.Element(
        f"""
    <div style="
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 9999;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 10px;
        border-radius: 6px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        font-size: 12px;
    ">
        {color_html}
    </div>
"""
    )
)
# Display the map
m
```


### Column {width=45%}

```{python}
# | title: "Trends in Means of Attack Over Time"
df["year"] = df["date"].dt.year
# Group and count incidents by year and attack type
df_yearly = df.groupby(["year", "means_of_attack"]).size().reset_index(name="count")

# Plotly line chart
fig = px.line(
    df_yearly,
    x="year",
    y="count",
    color="means_of_attack",
    title="Trends in Means of Attack Over Time",
    labels={"count": "Number of Incidents", "year": "Year"},
)

fig.update_layout(
    legend_title_text="Means of Attack", title_x=0.5, title={"font": {"weight": "bold"}}
)

```

# Geospatial Patterns

## Row
### Column 

```{python}
from folium.plugins import MarkerCluster

marker_cluster_map = folium.Map(
    location=[10, 20],
    zoom_start=1.5,
    min_zoom=2.5,
    max_bounds=True,
    tiles=None,
)

# Use Jawg Lagoon tiles
_ = folium.TileLayer(
    tiles=f"https://tile.jawg.io/jawg-lagoon/{{z}}/{{x}}/{{y}}.png?access-token={access_token}",
    attr='Tiles © <a href="http://jawg.io" target="_blank">Jawg</a>',
    name="Jawg Lagoon",
    control=True,
).add_to(marker_cluster_map)

marker_cluster = MarkerCluster().add_to(marker_cluster_map)

# Add CircleMarkers to the cluster
for _, row in df.iterrows():
    folium.CircleMarker(
        location=[row["latitude"], row["longitude"]],
        radius=3,
        color="red" if row["total_killed"] > 0 else "blue",
        fill=True,
        fill_opacity=0.7,
        popup=f"{row['location']}<br>Deaths: {row['total_killed']}",
    ).add_to(marker_cluster)

# Show the correct map
marker_cluster_map

```

### Column
```{python}
df["total_deaths"] = df["nationals_killed"] + df["internationals_killed"]

# Group and sort the data
fatal_by_country = (
    df.groupby("country")["total_deaths"]
    .sum()
    .sort_values(ascending=False)
    .head(10)
    .reset_index()
)

# Plotly bar chart
fig2 = px.bar(
    fatal_by_country,
    x="total_deaths",
    y="country",
    orientation="h",
    title="Top 10 Countries by Number of Aid Worker Deaths",
    color="total_deaths",
    color_continuous_scale="amp",
    labels={"total_deaths": "Total Aid<br>Worker Deaths", "country": "Country"},
)

# Reverse the y-axis so the largest is at the top
fig2.update_layout(
    yaxis=dict(autorange="reversed"),
    title={"font": {"weight": "bold"}},
    title_x=0.5,  # Center the title
    width=800,  # Set the width of the chart
    height=600,  # Set the height of the chart
)
```

## Row
### Column
```{python}
# | title: Total Deaths by Country and Means of Attack
df_grouped = (
    df.groupby(["country", "means_of_attack"])["total_killed"].sum().reset_index()
)

fig1 = px.choropleth(
    df_grouped,
    locations="country",
    locationmode="country names",
    color="total_killed",
    animation_frame="means_of_attack",
    color_continuous_scale="Reds",
    title="Total Deaths by Country and Means of Attack",
)

fig1.update_layout(title_x=0.5)
```

### Column
```{python}
# Calculate fatality rate
fatality_rate = (
    df.groupby("country")[["incident_id", "total_deaths"]]
    .agg({"incident_id": "count", "total_deaths": "sum"})
    .assign(fatality_rate=lambda x: x["total_deaths"] / x["incident_id"])
    .sort_values("fatality_rate", ascending=False)
    .head(10)
)

# Create a Plotly bar chart
fig3 = px.bar(
    fatality_rate,
    x="fatality_rate",
    y=fatality_rate.index,
    orientation="h",  # Horizontal bar chart
    color="fatality_rate",  # Color based on fatality rate
    color_continuous_scale="Burg",  # Use a blue color scale
    labels={"fatality_rate": "Average Deaths<br>per Incident", "y": "Country"},
    title="Countries with Highest Fatality Rate per Incident",
)

# Update layout for better appearance
fig3.update_layout(
    xaxis_title="Average Deaths per Incident",
    yaxis_title="Country",
    yaxis=dict(autorange="reversed"),
    coloraxis_showscale=True,  # Show color scale
    title_x=0.5,  # Center the title
    title={"font": {"weight": "bold"}},
    width=800,  # Set the width of the chart
    height=600,  # Set the height of the chart
)
```


# Victim Demographics

# Unsupervised Analysis 

# Recommendations