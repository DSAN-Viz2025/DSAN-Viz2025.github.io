---
format: 
    dashboard:
        engine: jupyter
        embed-resources: true
        scrolling: true
        orientation: rows
title: Dashboard
---

```{python}
import folium
import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd
import plotly.express as px
import plotly.io as pio
from IPython.display import IFrame
from IPython.display import display, HTML
pio.templates.default = "plotly"
from folium.features import GeoJsonTooltip
from branca.colormap import linear

```


# Overview 


## Row {height=30%}
### Column  (width = 20%)

```{python}
# | content: valuebox
# | title: "Total Incidents"
dict(icon="shield-check", value="3,949", color="primary")
```

### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Deaths"
dict(icon="heart-pulse", value="2,598", color="danger")
```


### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Kidnappings"
dict(icon="activity", value="1,976", color="warning")
```

### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Wounded"
dict(icon="bandaid", value="2,730", color="info")
```

### Column  (width = 20%)
```{python}
# | content: valuebox
# | title: "Total Affected"
dict(icon="people", value="7,304", color="success")

```

## Row {height = 70%} 
### Column {width=55%}
```{python}
# | echo: false
# | title: "Global Security Incidents"

# Load data
df = pd.read_csv("data/clean_data/cleaned_security_incidents.csv", parse_dates=["date"])

df_geo = df.dropna(subset=["latitude", "longitude"])

# Create GeoDataFrame
gdf = gpd.GeoDataFrame(
    df_geo,
    geometry=gpd.points_from_xy(df_geo["longitude"], df_geo["latitude"]),
    crs="EPSG:4326",
)

# Load world shapefile
world = gpd.read_file(
    "data/maps/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp"
)
world = world[~world["ADMIN"].isin(["Antarctica"])]

# Aggregate incidents by country
incident_counts = gdf.groupby("country")["incident_id"].count().reset_index()
incident_counts.columns = ["country", "incident_count"]

# Merge incident counts with the world GeoDataFrame
world = world.merge(incident_counts, left_on="ADMIN", right_on="country", how="left")
world["incident_count"] = world["incident_count"].fillna(0)

#  Create a colormap
colormap = linear.YlOrRd_09.scale(
    world["incident_count"].min(), world["incident_count"].max()
)
# map tile overlay "https://www.jawg.io/lab/"
access_token = "W6JbvTF90SFDXS2oNA2GA5k09njOlfZqefrP0mKamuMEhYhm1uUaxRNAbTyMDDrV"

m = folium.Map(
    location=[10, 20],
    zoom_start=1.5,
    min_zoom=2.5,
    max_bounds=True,
    tiles=None,  # Set to None so we can use a custom TileLayer
)

_ = folium.TileLayer(
    tiles=f"https://tile.jawg.io/jawg-lagoon/{{z}}/{{x}}/{{y}}.png?access-token={access_token}",
    attr='Tiles © <a href="http://jawg.io" target="_blank">Jawg</a>',
    name="Jawg Lagoon",
    control=True,
).add_to(m)


# Choropleth styling
def style_function(feature):
    count = feature["properties"]["incident_count"]
    return {
        "fillColor": colormap(count),
        "color": "black",
        "weight": 0.5,
        "fillOpacity": 0.7,
    }


# Tooltip
tooltip = GeoJsonTooltip(
    fields=["ADMIN", "incident_count"],
    aliases=["<strong>Country</strong>", "<strong>Incidents</strong>"],
    localize=True,
    sticky=True,
    style=(
        "background-color: white; color: #333; font-family: sans-serif; font-size: 13px; "
        "padding: 5px; border-radius: 5px; box-shadow: 1px 1px 2px rgba(0,0,0,0.25);"
    ),
)

# Add choropleth
_ = folium.GeoJson(
    world, name="Choropleth", style_function=style_function, tooltip=tooltip
).add_to(m)

# Add individual incident markers
for _, row in gdf.iterrows():
    popup_html = f"""
    <strong>Date:</strong> {row['date'].strftime('%Y-%m-%d')}<br>
    <strong>Region:</strong> {row['region']}<br>
    <strong>Means of Attack:</strong> {row['means_of_attack']}<br>
    <strong>Killed:</strong> {row['total_killed']}<br>
    <strong>Wounded:</strong> {row['total_wounded']}<br>
    <strong>Kidnapped:</strong> {row['total_kidnapped']}
    """

    _ = folium.Circle(
        location=[row.geometry.y, row.geometry.x],
        radius=15000,  # in meters; adjust as needed
        color="#3f51b5",
        fill=True,
        fill_color="#3f51b5",
        fill_opacity=0.5,
        popup=folium.Popup(popup_html, max_width=300),
    ).add_to(m)

colormap.caption = "Number of Security Incidents"
color_html = colormap._repr_html_()

# Wrap the colormap in a floating div and position it bottom-left
_ = m.get_root().html.add_child(
    folium.Element(
        f"""
    <div style="
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 9999;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 10px;
        border-radius: 6px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        font-size: 12px;
    ">
        {color_html}
    </div>
"""
    )
)
# Display the map
m
```


### Column {width=45%}

```{python}
# | echo: false
# | title: "Trends in Means of Attack Over Time"
display(
    HTML(
        """
<div style="overflow:hidden;">
  <div style="text-align: left;">
    <embed style="border: none;" src="outputs/trends_over_time.html" dpi="300" width="100%" height="600px" />
  </div>
</div>
"""
    )
)

```

# Geospatial Patterns



```{python}
# | title: Fatal Incidents by Location and Means of Attack
display(
    HTML(
        """
<div style="overflow:hidden;">
  <div style="text-align: left;">
    <embed style="border: none;" src="outputs/attack_type_world.html" dpi="300" width="100%" height="600px" />
  </div>
</div>
"""
    )
)
```


## Row 
### Column {width = 50%}
```{python}
# | title: Top 10 Countries by Number of Aid Worker Deaths
display(
    HTML(
        """
<div style="overflow:hidden;">
  <div style="text-align: left;">
    <embed style="border: none;" src="outputs/deaths.html" dpi="300" width="100%" height="600px" />
  </div>
</div>
"""
    )
)
```

### Column {width = 50%}
```{python}
# | title: Countries with Highest Fatality Rate per Incident
display(
    HTML(
        """
<div style="overflow:hidden;">
  <div style="text-align: left;">
    <embed style="border: none;" src="outputs/fatality_rate.html" dpi="300" width="100%" height="600px" />
  </div>
</div>
"""
    )
)

```


# Victim Demographics

## Row {height = 20%}

### Column {width = 80}
```{python}
# | title: Victim Outcomes by Aid Worker Type
display(
    HTML(
        """
<div style="overflow:hidden;">
  <div style="text-align: left;">
    <embed style="border: none;" src="outputs/national_international.html" dpi="300" width="100%" height="600px" />
  </div>
</div>
"""
    )
)
```


### Column {width = 20%}

::: {.callout-note title="Disparities in Victim Outcomes by Aid Worker Type"}

Although both national and international aid workers face serious threats, national staff bear a disproportionate burden of harm. The distribution of outcomes reveals that nationals are more likely to be killed in incidents compared to their international counterparts. This pattern was confirmed through statistical testing, reinforcing that nationals are not only more frequently targeted but also experience more lethal consequences. **These findings highlight the urgent need to strengthen protections for national personnel, who often operate in higher-risk, front-line settings with less institutional support.**

:::

## Row 

### Column {width = 10%}
::: {.callout-note title="Exposure Patterns by Organization Type"}

Security incidents are not evenly distributed across humanitarian organizations. **International and national NGOs experience the highest number of incidents—reflecting their broad operational presence in high-risk environments—followed by UN agencies and Red Cross affiliates.** A Kruskal-Wallis H test confirmed that these differences are statistically significant, suggesting that some organization types face consistently higher levels of threat exposure. These findings underscore the importance of tailoring security protocols and duty-of-care standards to organizational context.

:::

### Column {width = 90%}
```{python}
# | title:  Incidents by Organization Type
display(
    HTML(
        """
<div style="overflow:hidden;">
  <div style="text-align: left;">
    <embed style="border: none;" src="outputs/incidents_by_org_type.html" dpi="300" width="100%" height="600px" />
  </div>
</div>
"""
    )
)
```


# Advanced Threat Analysis

## Row {height = 30%}
### Column {width = 30%}

```{python}
# | title: "Aid Worker Risk Profiles by Country"
import pandas as pd
import plotly.graph_objects as go
df_profiles = pd.read_csv("outputs/risk_profiles.csv")

fig = go.Figure(
    data=[
        go.Table(
            header=dict(
                values=["<b>Risk Profile</b>", "<b>Countries</b>"],
                fill_color="#3f51b5",
                font=dict(color="white", size=14),
                align="left",
            ),
            cells=dict(
                values=[df_profiles["Risk Profile"], df_profiles["Countries"]],
                fill_color="lavender",
                align="left",
                font=dict(size=13),
            ),
        )
    ]
)

fig.update_layout(title="Aid Worker Risk Profiles by Country", title_x=0.5)

```

### Column {width = 70%}
```{python}
# | title: "Top Predictive Features of Fatal Incidents"
# | fig-cap: "This chart displays the top predictors of fatal incidents among aid workers, based on logistic regression coefficients."
importance_df = pd.read_csv("outputs/top_predictive_features.csv").head(10)

# Rename to clearer labels with categories
rename_map = {
    "means_of_attack_Kidnap-killing": "Means of Attack: Kidnap-Killing",
    "means_of_attack_Aerial bombardment": "Means of Attack: Aerial Bombardment",
    "country_Bangladesh": "Country: Bangladesh",
    "country_Rwanda": "Country: Rwanda",
    "means_of_attack_Unknown": "Means of Attack: Unknown",
    "means_of_attack_Shelling": "Means of Attack: Shelling",
    "country_Israel": "Country: Israel",
    "actor_type_Non-state armed group: Regional": "Actor Type: Regional Non-State Group",
    "country_Angola": "Country: Angola",
    "means_of_attack_Shooting": "Means of Attack: Shooting",
}
importance_df["Feature"] = importance_df[
"Feature"].replace(rename_map)

fig = px.bar(
    importance_df.sort_values("Coefficient", ascending=True),
    x="Coefficient",
    y="Feature",
    orientation="h",
    title="Top Predictors of Fatality (Logistic Regression)",
    color="Coefficient",
    color_continuous_scale="Burgyl",
)

_ = fig.update_coloraxes(showscale=False)  # ← hides the legend

fig.update_layout(
    height=475,
    margin=dict(l=10, r=10, t=60, b=30),
    title_x=0.5,
    title={"font": {"weight": "bold"}},
    yaxis=dict(tickfont=dict(size=13)),
    xaxis=dict(title="Coefficient"),
)
```



## Row {height = 65%}

### Column {width = 50%}

::: {.callout-note title="Interpreting Risk Profiles"}
Risk profiles are data-driven categories that group countries based on patterns in aid worker security incidents—including frequency, fatality rate, and kidnapping rate. Each profile reflects a different level and type of operational risk:

- **High Fatality & Kidnapping Risk**: Countries with *moderate incident volume* but *disproportionately high rates* of fatal outcomes and abductions.
- **High Incident Volume**: Countries with *frequent reported attacks*, though outcomes tend to be less severe.
- **Lower Risk with Moderate Volume**: Countries with *fewer and less deadly incidents*, suggesting lower overall risk or possible underreporting.

These profiles help humanitarian actors allocate resources, assess threats, and tailor safety strategies to different contexts.
:::

### Column {width = 50%}
```{python}
# | title: PCA of Country-Level Risk Profiles
# | fig-cap: "This PCA projection reduces the country-level incident data into two principal components, revealing clusters based on total incidents, fatality rate, and kidnapping rate. The axes represent linear combinations of those features and preserve the most variance in the dataset, making this view interpretable in terms of overall country risk."
display(
    HTML(
        """
<div style="overflow:hidden;">
  <div style="text-align: left;">
    <embed style="border: none;" src="outputs/pca.html" dpi="300" width="100%" height="600px" />
  </div>
</div>
"""
    )
)

```

